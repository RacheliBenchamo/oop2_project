#pragma once

//--------------------------- Include section  ---------------------------
#include <map>
#include <string>
#include <typeinfo>
#include <typeindex>
#include "GameObjBase.h"

namespace // anonymous namespace — the standard way to make function "static"
{
	using HitFunctionPtr = void (*)(GameObjBase&, GameObjBase&);
	using MapKey = std::pair<std::type_index, std::type_index>;
	using HitMap = std::map<MapKey, HitFunctionPtr>;
	class CollisionDetection
	{
	public:
		// search and activate the suitable function for the current collison.
		void processCollision(GameObjBase&, GameObjBase&);
	private:
		void PlayerFloor(GameObjBase& p, GameObjBase& f);
		void PlayerTeleport(GameObjBase& p, GameObjBase& f);
		void playerMonster(GameObjBase& p, GameObjBase& f);
		void playerDiamond(GameObjBase& p, GameObjBase& g);
		void playerRope(GameObjBase& p, GameObjBase& g);
		void playerLifePotion(GameObjBase& p, GameObjBase& g);
		void playerPowerPotion(GameObjBase& p, GameObjBase& g);
		void monsterFloor(GameObjBase& e, GameObjBase& f);
		void setPlayerCollisionHandling(void (*)(GameObjBase&, GameObjBase&)&);
		void setMonsterCollisionHandling(void (*)(GameObjBase&, GameObjBase&))&;
		HitMap initializeCollisionMap();
		HitFunctionPtr lookup(const std::type_index& class1,
			const std::type_index& class2);

	};
}
